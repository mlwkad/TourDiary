{"version":3,"file":"ws.js","sources":["api/ws.js"],"sourcesContent":["// WebSocket聊天工具\r\nlet socketTask = null;\r\nlet isConnecting = false;\r\nlet messageCallback = null;\r\nlet connectionTimeout = null;\r\n\r\n// 创建或获取WebSocket连接\r\nconst getWebSocketConnection = () => {\r\n    return new Promise((resolve, reject) => {\r\n        console.log('开始建立WebSocket连接...');\r\n\r\n        // 如果已有连接，直接返回\r\n        if (socketTask) {\r\n            console.log('使用现有WebSocket连接');\r\n            resolve(socketTask);\r\n            return;\r\n        }\r\n\r\n        // 如果正在连接中，等待连接完成\r\n        if (isConnecting) {\r\n            console.log('WebSocket正在连接中，等待连接完成...');\r\n            const checkConnection = setInterval(() => {\r\n                if (socketTask) {\r\n                    console.log('WebSocket连接等待完成');\r\n                    clearInterval(checkConnection);\r\n                    resolve(socketTask);\r\n                }\r\n            }, 100);\r\n\r\n            // 添加超时处理\r\n            setTimeout(() => {\r\n                if (!socketTask) {\r\n                    console.log('WebSocket连接超时');\r\n                    clearInterval(checkConnection);\r\n                    isConnecting = false;\r\n                    reject(new Error('连接超时'));\r\n                }\r\n            }, 5000); // 5秒超时\r\n\r\n            return;\r\n        }\r\n\r\n        // 创建新连接\r\n        console.log('创建新的WebSocket连接');\r\n        isConnecting = true;\r\n        const wsUrl = `ws://localhost:3000`;\r\n        console.log('WebSocket URL:', wsUrl);\r\n\r\n        try {\r\n            // 创建WebSocket连接\r\n            socketTask = uni.connectSocket({\r\n                url: wsUrl,\r\n                success: () => {\r\n                    console.log('WebSocket连接请求已发送');\r\n                },\r\n                fail: (error) => {\r\n                    console.error('WebSocket连接失败:', error);\r\n                    isConnecting = false;\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n            // 设置连接超时\r\n            connectionTimeout = setTimeout(() => {\r\n                if (!socketTask) {\r\n                    console.log('WebSocket连接超时');\r\n                    isConnecting = false;\r\n                    reject(new Error('连接超时'));\r\n                }\r\n            }, 5000); // 5秒超时\r\n\r\n            // 监听WebSocket连接打开\r\n            socketTask.onOpen(() => {\r\n                console.log('WebSocket连接已打开');\r\n                if (connectionTimeout) {\r\n                    clearTimeout(connectionTimeout);\r\n                }\r\n                isConnecting = false;\r\n                resolve(socketTask);\r\n            });\r\n\r\n            // 监听WebSocket消息\r\n            socketTask.onMessage((res) => {\r\n                console.log('收到服务器消息:', res.data);\r\n                try {\r\n                    const data = JSON.parse(res.data);\r\n                    console.log('解析后的消息数据:', data);\r\n\r\n                    if (messageCallback) {\r\n                        switch (data.type) {\r\n                            case 'chat':\r\n                                messageCallback({\r\n                                    type: 'update',\r\n                                    content: data.content,\r\n                                    onlineInfo: data.onlineInfo\r\n                                });\r\n                                break;\r\n                            case 'done':\r\n                                messageCallback({\r\n                                    type: 'complete',\r\n                                    content: data.content,\r\n                                    totalTokens: data.totalTokens\r\n                                });\r\n                                break;\r\n                            case 'error':\r\n                                messageCallback({\r\n                                    type: 'error',\r\n                                    error: data.error\r\n                                });\r\n                                break;\r\n                            case 'end':\r\n                                messageCallback({\r\n                                    type: 'end'\r\n                                });\r\n                                break;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.error('解析WebSocket消息失败:', e);\r\n                }\r\n            });\r\n\r\n            // 监听WebSocket错误\r\n            socketTask.onError((res) => {\r\n                console.error('WebSocket发生错误:', res);\r\n                if (connectionTimeout) {\r\n                    clearTimeout(connectionTimeout);\r\n                }\r\n                socketTask = null;\r\n                isConnecting = false;\r\n                reject(res);\r\n            });\r\n\r\n            // 监听WebSocket关闭\r\n            socketTask.onClose(() => {\r\n                console.log('WebSocket连接已关闭');\r\n                if (connectionTimeout) {\r\n                    clearTimeout(connectionTimeout);\r\n                }\r\n                socketTask = null;\r\n                isConnecting = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('创建WebSocket连接时发生错误:', error);\r\n            isConnecting = false;\r\n            reject(error);\r\n        }\r\n    });\r\n};\r\n\r\n// 导出的主函数\r\nexport const streamChat = (message, onUpdate) => {\r\n    console.log('开始发送消息:', message);\r\n\r\n    // 保存回调函数\r\n    messageCallback = onUpdate;\r\n\r\n    // 获取连接并发送消息\r\n    getWebSocketConnection()\r\n        .then((task) => {\r\n            console.log('WebSocket连接成功，准备发送消息');\r\n            // 发送消息\r\n            task.send({\r\n                data: JSON.stringify({\r\n                    type: 'chat',\r\n                    message: message\r\n                }),\r\n                success: () => {\r\n                    console.log('消息发送成功');\r\n                },\r\n                fail: (error) => {\r\n                    console.error('发送消息失败:', error);\r\n                    onUpdate && onUpdate({\r\n                        type: 'error',\r\n                        error: '发送消息失败'\r\n                    });\r\n                }\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            console.error('WebSocket连接失败:', error);\r\n            onUpdate && onUpdate({\r\n                type: 'error',\r\n                error: 'WebSocket连接失败: ' + error.message\r\n            });\r\n        });\r\n};\r\n\r\n// 关闭WebSocket连接\r\nexport const closeWebSocket = () => {\r\n    console.log('准备关闭WebSocket连接');\r\n    if (connectionTimeout) {\r\n        clearTimeout(connectionTimeout);\r\n    }\r\n    if (socketTask) {\r\n        socketTask.close({\r\n            success: () => {\r\n                console.log('WebSocket连接已关闭');\r\n            },\r\n            fail: (error) => {\r\n                console.error('关闭WebSocket连接失败:', error);\r\n            }\r\n        });\r\n        socketTask = null;\r\n        messageCallback = null;\r\n    }\r\n}; "],"names":["uni"],"mappings":"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"}