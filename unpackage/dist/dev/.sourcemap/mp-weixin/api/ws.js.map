{"version":3,"file":"ws.js","sources":["api/ws.js"],"sourcesContent":["// WebSocket\r\nlet socketTask = null\r\nlet isConnecting = false\r\nlet messageCallback = null\r\nlet connectionTimeout = null\r\n\r\n// 创建或获取WebSocket连接\r\nconst getWebSocketConnection = () => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        // 如果已有连接，直接返回\r\n        if (socketTask) {\r\n            resolve(socketTask)\r\n            return\r\n        }\r\n        // 正在连接 轮训检查\r\n        if (isConnecting) {\r\n            const checkConnection = setInterval(() => {\r\n                if (socketTask) {\r\n                    clearInterval(checkConnection)\r\n                    resolve(socketTask)\r\n                }\r\n            }, 100)\r\n            // 添加超时处理\r\n            setTimeout(() => {\r\n                if (!socketTask) {\r\n                    clearInterval(checkConnection)\r\n                    isConnecting = false\r\n                    reject(new Error('连接超时'))  // catch里打印err.message\r\n                }\r\n            }, 5000)\r\n            return\r\n        }\r\n\r\n        // 创建新连接\r\n        isConnecting = true\r\n        const wsUrl = `wss://ovmmqfovxbil.sealosbja.site`\r\n        try {\r\n            socketTask = uni.connectSocket({\r\n                url: wsUrl,\r\n                success: () => { },\r\n                fail: (error) => {\r\n                    console.log('WebSocket连接失败:', error)\r\n                    isConnecting = false\r\n                    reject(error)\r\n                }\r\n            })\r\n            // 设置连接超时\r\n            connectionTimeout = setTimeout(() => {\r\n                if (!socketTask) {\r\n                    isConnecting = false\r\n                    reject(new Error('连接超时'))\r\n                }\r\n            }, 5000)\r\n            // 监听WebSocket连接打开\r\n            socketTask.onOpen(() => {\r\n                if (connectionTimeout) clearTimeout(connectionTimeout)\r\n                isConnecting = false\r\n                // 成功打开,返回socketTask实例\r\n                resolve(socketTask)\r\n                // resolve()或者reject()不会终止Promise内部代码的继续执行\r\n                // 只是将Promise的状态设置为resolve或者reject\r\n                // 此时可以使用.then()或者.catch()访问到resolve或者reject的值\r\n            })\r\n            // 监听WebSocket消息\r\n            socketTask.onMessage((res) => {\r\n                try {\r\n                    const data = JSON.parse(res.data)\r\n                    if (messageCallback) {\r\n                        switch (data.type) {\r\n                            case 'chat':\r\n                                messageCallback({  // 触发回调函数\r\n                                    type: 'update',\r\n                                    content: data.content,\r\n                                    onlineInfo: data.onlineInfo\r\n                                })\r\n                                break\r\n                            case 'done':\r\n                                messageCallback({\r\n                                    type: 'complete',\r\n                                    content: data.content,\r\n                                    totalTokens: data.totalTokens\r\n                                })\r\n                                break\r\n                            case 'error':\r\n                                messageCallback({\r\n                                    type: 'error',\r\n                                    error: data.error\r\n                                })\r\n                                break\r\n                            case 'end':\r\n                                messageCallback({\r\n                                    type: 'end'\r\n                                })\r\n                                break\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log('解析WebSocket消息失败:', e)\r\n                }\r\n            })\r\n            // 监听WebSocket错误\r\n            socketTask.onError((err) => {\r\n                console.log('socketTask发生错误:', err)\r\n                if (connectionTimeout) {\r\n                    clearTimeout(connectionTimeout)\r\n                }\r\n                socketTask = null\r\n                isConnecting = false\r\n                reject(err)\r\n            })\r\n            // 监听WebSocket关闭\r\n            socketTask.onClose(() => {\r\n                console.log('WebSocket连接已关闭')\r\n                if (connectionTimeout) {\r\n                    clearTimeout(connectionTimeout)\r\n                }\r\n                socketTask = null\r\n                isConnecting = false\r\n            })\r\n        } catch (error) {\r\n            console.log('创建WebSocket连接时发生错误:', error)\r\n            isConnecting = false\r\n            reject(error)\r\n        }\r\n    })\r\n}\r\n\r\n// 导出的主函数\r\nexport const streamChat = (message, onUpdate) => {\r\n    // 保存回调函数\r\n    messageCallback = onUpdate\r\n    // 获取连接并发送消息\r\n    getWebSocketConnection()\r\n        .then((task) => {\r\n            task.send({  // 发送消息\r\n                data: JSON.stringify({\r\n                    type: 'chat',\r\n                    message: message\r\n                }),\r\n                success: () => { },\r\n                fail: (error) => {\r\n                    onUpdate && onUpdate({  // 存在onUpdate回调函数,才触发回调函数\r\n                        type: 'error',\r\n                        error: '发送消息失败' + error.message\r\n                    })\r\n                }\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            onUpdate && onUpdate({\r\n                type: 'error',\r\n                error: 'WebSocket连接失败: ' + error.message\r\n            });\r\n        });\r\n};\r\n\r\n// 关闭WebSocket连接\r\nexport const closeWebSocket = () => {\r\n    if (connectionTimeout) {\r\n        clearTimeout(connectionTimeout)\r\n    }\r\n    if (socketTask) {\r\n        socketTask.close({\r\n            success: () => {\r\n                console.log('WebSocket连接已关闭')\r\n            },\r\n            fail: (error) => {\r\n                console.log('关闭WebSocket连接失败:', error)\r\n            }\r\n        })\r\n        socketTask = null\r\n        messageCallback = null\r\n    }\r\n}"],"names":["uni"],"mappings":"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"}