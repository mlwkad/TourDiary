{"version":3,"file":"api.js","sources":["api/api.js"],"sourcesContent":["import http from \"./http.js\";\r\n\r\nlet baseUrl = ''\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    baseUrl = 'https://vkxvigkepssq.sealosbja.site'\r\n} else {\r\n    baseUrl = 'https://ovmmqfovxbil.sealosbja.site'\r\n}\r\n\r\n// * 请求节流\r\n\r\nconst map = new Map()\r\nconst throttle = (key, delay = 1000) => {\r\n    const date = new Date().getTime()\r\n    if (map.has(key) && (date - map.get(key)) < delay) {\r\n        uni.showToast({\r\n            title: '请求过于频繁',\r\n            icon: 'none'\r\n        })\r\n        return false\r\n    }\r\n    map.set(key, date)\r\n    return true\r\n}\r\n\r\n// 用户注册\r\nexport const signUp = (data) => {\r\n    return http('/api/signUp', data, 'POST')\r\n}\r\n\r\n// 用户登录\r\nexport const checkLogin = (data) => {\r\n    return http('/api/checkLogin', data, 'POST')\r\n}\r\n\r\n// 获取用户信息\r\nexport const getUserInfo = (userID) => {\r\n    return http(`/api/user/${userID}`)\r\n}\r\n\r\n// 更新用户信息\r\nexport const updateUserInfo = (userID, data) => {\r\n    return http(`/api/user/${userID}`, data, 'PUT')\r\n}\r\n\r\n// 获取用户发布的内容\r\nexport const getUserReleases = (userID) => {\r\n    return http(`/api/user/${userID}/releases`)\r\n}\r\n\r\n// 获取用户喜欢的内容\r\nexport const getUserLiked = (userID) => {\r\n    return http(`/api/user/${userID}/liked`)\r\n}\r\n\r\n// 添加喜欢的内容\r\nexport const addLiked = (userID, releaseID) => {\r\n    return http(`/api/user/${userID}/liked`, { releaseID }, 'POST')\r\n}\r\n\r\n// 取消喜欢的内容\r\nexport const removeLiked = (userID, releaseID) => {\r\n    return http(`/api/user/${userID}/liked/${releaseID}`, {}, 'DELETE')\r\n}\r\n\r\n// 获取所有发布内容\r\nexport const getAllReleases = (limit = 50, offset = 0) => {\r\n    return http(`/api/releases`, { limit, offset })\r\n}\r\n\r\n// 搜索相关内容\r\nexport const searchReleases = (data) => {\r\n    return http('/api/releases/search', data, 'POST')\r\n}\r\n\r\n// 获取发布内容详情\r\nexport const getReleaseDetail = (releaseID) => {\r\n    if (!throttle(`getReleaseDetail`, 100)) return\r\n    return http(`/api/release/${releaseID}`)\r\n}\r\n\r\n// 创建发布内容\r\nexport const createRelease = (data) => {\r\n    return http('/api/release', data, 'POST')\r\n}\r\n\r\n// 更新发布内容\r\nexport const updateRelease = (releaseID, data) => {\r\n    return http(`/api/release/${releaseID}`, data, 'PUT')\r\n}\r\n\r\n// 删除发布内容\r\nexport const deleteRelease = (releaseID, userID) => {\r\n    if (!throttle(`deleteRelease`, 300)) return\r\n    return http(`/api/release/${releaseID}`, { userID }, 'DELETE')\r\n}\r\n\r\n// 更新状态\r\nexport const updateState = (releaseID, data) => {\r\n    if (!throttle(`updateState`, 300)) return\r\n    return http(`/api/release/${releaseID}/state`, data, \"PUT\")\r\n}\r\n\r\n// 获取关注列表\r\nexport const getFollowingList = (userID) => {\r\n    return http(`/api/user/${userID}/following`)\r\n}\r\n\r\n// 关注\r\nexport const follow = (userID, data) => {\r\n    if (!throttle(`follow`, 300)) return\r\n    return http(`/api/user/${userID}/follow`, data, 'POST')\r\n}\r\n\r\n// 取消关注\r\nexport const unfollow = (userID, followUserID) => {\r\n    if (!throttle(`unfollow`, 300)) return\r\n    return http(`/api/user/${userID}/follow/${followUserID}`, {}, 'DELETE')\r\n}\r\n\r\n// * 云端存储(使用sealos存储桶,结合密钥信息,后端自定义路径,上传成功后即可获得一个可访问的公网url)\r\n// * 1.节省服务器\r\n// * 2.前端直接访问url,无需请求服务器\r\n\r\n// 上传文件\r\nexport const uploadFiles = async (filePaths, type = '') => {  // image/video/cover\r\n    const paths = Array.isArray(filePaths) ? filePaths : [filePaths]\r\n    if (paths.length === 0 || !paths[0]) return { pictures: [], videos: [], covers: [] }\r\n    let url = baseUrl + '/api/upload'\r\n    if (type) { url += `?type=${type}` }\r\n    try {\r\n        uni.showLoading({ title: '上传中...' })\r\n        const result = { pictures: [], videos: [], covers: [] }\r\n        for (const path of paths) {  // 一张一张的传\r\n            const res = await uploadSingleFile(path, url)\r\n            if (res) {\r\n                if (res.pictures) result.pictures.push(res.pictures)\r\n                if (res.videos) result.videos.push(res.videos)\r\n                if (res.covers) result.covers.push(res.covers)\r\n            }\r\n        }\r\n        return result\r\n    } catch (e) {\r\n        console.log(e)\r\n        return { pictures: [], videos: [], covers: [] }\r\n    } finally {\r\n        uni.hideLoading()\r\n    }\r\n}\r\n\r\n// 文件上传 辅助函数\r\nconst uploadSingleFile = (filePath, url) => {\r\n    return new Promise((resolve, reject) => {\r\n        uni.uploadFile({\r\n            url,\r\n            filePath,\r\n            name: 'file',\r\n            success: (res) => {\r\n                if (res.statusCode === 200) {\r\n                    const data = JSON.parse(res.data)\r\n                    resolve(data.success ? data.data : null)\r\n                } else {\r\n                    reject(`服务器错误(${res.statusCode})`)\r\n                }\r\n            },\r\n            fail: (e) => reject(e)\r\n        })\r\n    })\r\n}"],"names":["uni","http"],"mappings":"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"}